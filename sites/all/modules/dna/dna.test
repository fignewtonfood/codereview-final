<?php
class DNATests extends DrupalWebTestCase {
    public static function getInfo() {
        return array(
            'name' => 'DNA Tests',
            'description' => 'Tests for the DNA module.',
            'group' => 'Epicodus Examples Tests',
        );
    }

    public function setUp() {
        parent::setUp(array('dna'));

        $user = $this->drupalCreateAdminUser();
        $this->drupalLogin($user);
        $this->createTestingPage();
    }

    public function createTestingPage() {
       //$info = the information needed to create the basic page at the url `pagetest`.
       $info = array();
       $info['input_dna_string'] = "ATGC";

       //save the new page
       $this->drupalPost('dna_input', $info, t('Find Pairs'));

       //set new page to the correct path. We know this will be node/1 because we are starting from scratch.
    //    $path['source'] = 'dna_success';
    //    $path['alias'] = 'pagetest';
    //    path_save($path);
   }

   public function drupalCreateAdminUser(array $permissions = array()) {
        $roles = user_roles();
        $index = array_search('administrator', $roles);
        $user = $this->drupalCreateUser($permissions);
        $user->roles[$index] = 'administrator';
        return user_save($user);
    }

    public function testNewPage() {
        // Navigate to /pagetest.
        // $this->drupalGet('pagetest');
        // Verify that the text "1, 2, 3!", exists on the page.
        $this->assertText("TACG", 'The text on the page is correct. Hoorah!');
    }
}

class DNATestCase extends DrupalUnitTestCase
{

    public static function getInfo()
    {

        //just returns information about the tests in this class.
        return array(
        'name' => 'My DNA unit tests',
        'description' => 'Test that dna_transform works properly.',
        'group' => 'Epicodus Examples Tests',
        );

    }

    //no setUp() for unit tests.
    //unit test methods must start with 'test'
    //it is encouraged to group several assert statements into one test method for drupal unit tests.

    function testDnaTransform()
    {

        //English description
        //displays desired result during test
        $description = 'A value of "a" should return "T"';

        //Arrange
        //create input
        $input = 'a';

        //Act
        //run the function we're testing with input and store output in $result.
        $result = dna_transform($input);

        //Assert
        //not quite the same as assertEquals.
        //using assertTrue: if $result is true, test passes.
        //pass in $description for display.
        $expected_output = 'T';
        $this->assertTrue($result, $expected_output, $description);

        //Here are the rest of the tests from the example
        $description = 'A value of "t" should return "A"';
        $input = 't';
        $result = dna_transform($input);
        $expected_output = 'A';
        $this->assertTrue($result, $expected_output, $description);

        $description = 'A value of "g" should return "C"';
        $input = 'g';
        $result = dna_transform($input);
        $expected_output = 'C';
        $this->assertTrue($result, $expected_output, $description);

        $description = 'A value of "c" should return "G"';
        $input = 'c';
        $result = dna_transform($input);
        $expected_output = 'G';
        $this->assertTrue($result, $expected_output, $description);

        $description = 'A value of "acgt" should return "TGCA"';
        $input = 'acgt';
        $result = dna_transform($input);
        $expected_output = 'TGCA';
        $this->assertTrue($result, $expected_output, $description);
    }
}
